<?php

/**
 * @file
 * OCHA Document store connector.
 */

use Drupal\Core\Form\FormStateInterface;
use Solarium\Core\Query\QueryInterface  as SolariumQueryInterface;
use Drupal\search_api\Query\QueryInterface as SearchApiQueryInterface;

/**
 * Alter base url of the endpoints.
 */
function ocha_docstore_files_get_endpoint_base($endpoint) {
  $base_url = \Drupal::config('ocha_docstore_files.settings')->get('endpoint_url');

  if (empty($base_url)) {
    return $endpoint;
  }

  $path = parse_url($endpoint, PHP_URL_PATH);
  return rtrim($base_url, '/') . $path;
}

/**
 * Alter api-key of the endpoints.
 */
function ocha_docstore_files_get_endpoint_apikey($apikey) {
  $endpoint_apikey = \Drupal::config('ocha_docstore_files.settings')->get('endpoint_apikey');

  if (empty($endpoint_apikey)) {
    return $apikey;
  }

  return $endpoint_apikey;
}

/**
 * Implements hook_inline_entity_form_entity_form_alter().
 *
 * Ensure external entities created via an inline entity form are saved.
 */
function ocha_docstore_files_inline_entity_form_entity_form_alter(array &$entity_form, FormStateInterface &$form_state) {
  if (isset($entity_form['#entity']) && is_a($entity_form['#entity'], '\Drupal\external_entities\Entity\ExternalEntity')) {
    $entity_form['#save_entity'] = TRUE;
  }
}

/**
 * Implements hook_search_api_solr_query_alter().
 *
 * Tell Solr to return the stored entities.
 */
function ocha_docstore_files_search_api_solr_query_alter(SolariumQueryInterface $solarium_query, SearchApiQueryInterface $query) {
  // Get the mapping field names -> Solr field names.
  $solr_field_names = $query->getIndex()
    ->getServerInstance()
    ->getBackend()
    ->getSolrFieldNames($query->getIndex());

  // Tell solr to return the stored entity.
  if (!empty($solr_field_names['_stored_entity'])) {
    $solarium_query->addField($solr_field_names['_stored_entity']);
  }
}

/**
 * Implements hook_facets_search_api_query_type_mapping_alter().
 *
 * Make our string query type available.
 */
function ocha_docstore_files_facets_search_api_query_type_mapping_alter($backend_plugin_id, array &$query_types) {
  $query_types['ar_string'] = 'ar_search_api_string';
}
